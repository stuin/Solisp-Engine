Gridcannon, Challenge

(Append (Four-Suit Standard) {J1 J1})
{(Max 1)}

(HLayout
	(VLayout
		(Slot
			INPUT
			Start-Extra
			(On-Grab
				(Flip 1 1)
			)
			(On-Start
				(+ (Set list CUSTOM))
				(Repeat (Mutate :list (Map st list (
					(If st
						(If (> (Value 1) 10)
							(Step (Move 1 2) st)
							(Step (Flip 1 st) 0)
						)
					)
				))))
				(Move-All 2 1)
				(Flip 1 1)
			)
		)
		(VStack
			(Filter-Open {N1})
			(Max 4)
		)
		(Slot
			(Filter-Open {JN})
			(Max 2)
		)
		(Slot INPUT OUTPUT)
	)
	(Apply OUTPUT
		(VLayout
			(HLayout
				(Slot INPUT OUTPUT)
				(VStack #Top Left
					{(Place-If
						(Check 0)
					)}
				)
				(VStack #Top Middle
					{(Place-If
						(Check 1)
					)}
				)
				(VStack #Top Right
					{(Place-If
						(Check 2)
					)}
				)
				(Slot INPUT OUTPUT)
			)
			(HLayout
				(VStack #Left Top
					{(Place-If
						(Check 0)
					)}
				)
				(Slot
					(Place-If
						(>= (Value from) (Value this))
						(== (Value from) 1)
					)
					(On-Place
						(Shoot {(+ this 1) (+ this 5)})
					)
				)
				(Slot
					(Place-If
						(>= (Value from) (Value this))
						(== (Value from) 1)
					)
					(On-Place
						(Shoot {(+ this 5)})
					)
				)
				(Slot
					(Place-If
						(>= (Value from) (Value this))
						(== (Value from) 1)
					)
					(On-Place
						(Shoot {(+ this 5) (- this 1)})
					)
				)
				(VStack #Right Top
					{(Place-If
						(Check 2)
					)}
				)
			)
			(HLayout
				(VStack #Left Middle
					{(Place-If
						(Check 3)
					)}
				)
				(Slot
					(Place-If
						(>= (Value from) (Value this))
						(== (Value from) 1)
					)
					(On-Place
						(Shoot {(+ this 1)})
					)
				)
				(Slot
					{(Place-If
						(>= (Value from) (Value this))
						(== (Value from) 1)
					)}
				)
				(Slot
					(Place-If
						(>= (Value from) (Value this))
						(== (Value from) 1)
					)
					(On-Place
						(Shoot {(- this 1)})
					)
				)
				(VStack #Right Middle
					{(Place-If
						(Check 5)
					)}
				)
			)
			(HLayout
				(VStack #Left Bottom
					{(Place-If
						(Check 6)
					)}
				)
				(Slot
					(Place-If
						(>= (Value from) (Value this))
						(== (Value from) 1)
					)
					(On-Place
						(Shoot {(+ this 1) (- this 5)})
					)
				)
				(Slot
					(Place-If
						(>= (Value from) (Value this))
						(== (Value from) 1)
					)
					(On-Place
						(Shoot {(- this 5)})
					)
				)
				(Slot
					(Place-If
						(>= (Value from) (Value this))
						(== (Value from) 1)
					)
					(On-Place
						(Shoot {(- this 5) (- this 1)})
					)
				)
				(VStack #Right Bottom
					{(Place-If
						(Check 8)
					)}
				)
			)
			(HLayout
				(Slot INPUT OUTPUT)
				(VStack #Bottom Left
					{(Place-If
						(Check 6)
					)}
				)
				(VStack #Bottom Middle
					{(Place-If
						(Check 7)
					)}
				)
				(VStack #Bottom Right
					{(Place-If
						(Check 8)
					)}
				)
				(Slot INPUT OUTPUT)
			)
		)
	)
)

(Step
	(Set Check {
		{ chosen }
		(If (== (Count this) 0)
			(If (> (Value from) 10)
				(==
					(Get-Max (Set list (Map st CUSTOM (+
						(* (== (Suit st) (Suit from)) 13)
						(* (== (Color st) (Color st)) 13)
						(Value st)
					))))
					(Get chosen list)
				)
			)
			(*
				(Not (Hidden this))
				(<= (Value from) 10)
			)
		)
	})
	(Set Shoot {
		{ iterators }
		(Get 0 iterators)
	})
	true
)